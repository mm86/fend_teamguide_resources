Functions in JS


There are two ways in which you can construct a function.

1. function declaration: which begins with the function keyword
and includes the name of the function immediately following it.

example:

function add(num1, num2){
    return num1 + num2;
}

2. Function expression: These functions are considered anonymous
as the function object does not have a name. Instead, function 
expressions are typically referenced via a variable or property,
as in this expression.

var add = function(num1, num2){
    return num1 + num2;
};

This code actually assigns a function value to the variable add.

Function expression is almost identical to the function declaration
except for the missing name and the semicolon in the end. 

However, they differ in a very important way. Function declarations 
are hoisted to the top of the context(either the function in which the
declaration occurs or the global scope) when the code is executed.
That means you can define a function after it is used in code without
generating an error. For example,

var result = add(5,5);
function add(num1, num2){
   return num1 + num2;
}

This code works inspite of the function declaration after the function call,because the javascript engine hoists the function declaration
to the top and actually executes the code like as if it was written like this

function add(num1, num2){
  return num1 + num2;
}

var result = add(5,5);

Function hoisting happens only for function declarations
because the function name is known ahead of time.
Function expressions, on the other hand, cannot be hoisted because
the functions can be referenced only through a variable.

so, this code will cause an error

var result = add(5,5);
var add = function(num1, num2){
  return num1+num2;
};
