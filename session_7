Functions in JS


There are two ways in which you can construct a function.

1. function declaration: which begins with the function keyword
and includes the name of the function immediately following it.

example:

function add(num1, num2){
    return num1 + num2;
}

2. Function expression: These functions are considered anonymous
as the function object does not have a name. Instead, function 
expressions are typically referenced via a variable or property,
as in this expression.

var add = function(num1, num2){
    return num1 + num2;
};

This code actually assigns a function value to the variable add.

Function expression is almost identical to the function declaration
except for the missing name and the semicolon in the end. 

However, they differ in a very important way. Function declarations 
are hoisted to the top of the context(either the function in which the
declaration occurs or the global scope) when the code is executed.
That means you can define a function after it is used in code without
generating an error. For example,

var result = add(5,5);
function add(num1, num2){
   return num1 + num2;
}

This code works inspite of the function declaration after the function call,because the javascript engine hoists the function declaration
to the top and actually executes the code like as if it was written like this

function add(num1, num2){
  return num1 + num2;
}

var result = add(5,5);

Function hoisting happens only for function declarations
because the function name is known ahead of time.
Function expressions, on the other hand, cannot be hoisted because
the functions can be referenced only through a variable.

so, this code will cause an error

var result = add(5,5);
var add = function(num1, num2){
  return num1+num2;
};

Functions as values:

Just like objects, since functions are also objects, you can assign functions to variables, add them to objects, pass them to other functions
as arguments and return them from functions. Basically, you can use a function anywhere you would use any other reference value.

example:

function helloWorld(){
    console.log("Hello World");

}

helloWorld(); //outputs "Hello World"

var helloWorld2 = helloWorld1;
helloWorld2(); // also ouputs "Hello World"

Since both helloWorld and helloWorld2 are now pointing to the same function, that means both have the same result when executed.

Parameters:

Another unique aspect of JS functions are that you can pass any number of
parameters to any function without causing an error. Thats because function parameters are actually stored as an array-like structure called arguments,arguments can grow to contain any number of values. 
parameters in a function exist mostly for convenience and don't actually
limit the number of arguments that a function can accept.

example:

function args(value){
     return value;
}

console.log(args("Hello",25)); // outputs "Hello"


For vs for-in vs forEach loops:

http://udacity.github.io/frontend-nanodegree-styleguide/javascript.html#for-in-loop


work = {
jobs:["web developer","front end engineer"]    
}

for (var i = 0; i < work.jobs.length; i++) {
    var job = work.jobs[i];
    console.log(job);
}

work.jobs.forEach(function(job) {
   console.log(job);
});

For-in:

Javascript's for..in is designed to iterate over the properties of an object. Producing the key of each property. Using this key combined with the Object's bracket syntax, you can easily access the values you are after.

var obj = {
    foo: "bar",
    fizz: "buzz",
    moo: "muck"
};

for ( var prop in obj ) {
    console.log(prop);      // foo / fizz / moo
    console.log(obj[prop]); // bar / buzz / muck
}
